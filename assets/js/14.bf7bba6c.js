(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{549:function(e,t,o){"use strict";o.r(t);var n=o(6),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v('本笔记参考 RehabMan 指南 [Guide] Using Clover to "hotpatch" ACPI https://www.tonymacx86.com/threa ... tpatch-acpi.200137/\n我接触到 Hotpatch 是因为一天在燃7000 群里，群主：设为主页 告诉给我，他的 DSDT 修改全是使用 RM 的 Hotpatch。然后我就入坑研究我自己的 Hotpatch，并且边做边记录。')]),e._v(" "),o("p",[e._v("其实 Hotpatch 非常麻烦，和平时提取 ACPI，反编译，再补丁，放入 Clover EFI 的 Patches 文件夹没什么")]),e._v(" "),o("p",[e._v("Hotpatch 简述")]),e._v(" "),o("p",[e._v("什么是 Hotpatch?")]),e._v(" "),o("p",[e._v('RehabMan 的介绍是:\nThat guide uses what is known as "static patching". In order to inject patched ACPI files, we extract native ACPI, disassemble them, make changes, then recompile and place the files in ACPI/patched, so that Clover injects the patched ACPI instead of native ACPI. With the techniques detailed in this guide, the changes can be made directly to the ACPI binaries provided by BIOS, skipping the extract, disassembly, and recompilation steps.')]),e._v(" "),o("p",[e._v("该指南使用所谓的“静态修补”。 为了注入修补的ACPI文件，我们提取本地ACPI，反汇编，进行更改，然后重新编译并将文件放在ACPI / patched中，以便Clover注入修补的ACPI而不是本机ACPI。 使用本指南中详述的技术，可以直接对BIOS提供的ACPI二进制文件进行更改，跳过提取，反汇编和重新编译步骤。(翻译来自 Google 翻译)\n我的理解:")]),e._v(" "),o("p",[e._v("其实 Hotpatch 就是将所有修补 ACPI 文件的补丁变成一个一个模块,通过重命名主板提供的 ACPI 文件原来的 Method (方法/函数) 来禁用原有的方法,再用 SSDT 来放入我们修改后的(已修补)的 Method (方法/函数).")]),e._v(" "),o("p",[e._v("当然上面所说的是终极解决的办法,其实还有很多很简单的方法能够完成 ACPI 补丁的功能.")]),e._v(" "),o("p",[e._v("如果有兴趣可以去看看 RahabMan 帖子.")]),e._v(" "),o("p",[e._v("我要做的就是将之前应用在我的 DSDT 上的补丁使用 Hotpatch 方式来应用。")]),e._v(" "),o("p",[e._v('之前我在 DSDT 打的补丁有.\n"Fix _WAK Arg0 v2" "HPET Fix" "SMBUS Fix""IRQ Fix" "RTC Fix" "OS Check Fix（Windows 7）" "OS Check Fix（Windows 8）" "Fix Mutex with non-zero SyncLevel" //对比了下 这个补丁是不需要打的"Rename GFX0 to IGPU" "Brightness fix(Haswell/Broadwell)" 复制代码')]),e._v(" "),o("p",[e._v("Clover 常规补丁")]),e._v(" "),o("p",[e._v("Fix _WAK Arg0 v2→ ACPI > DSDT > FIX_WAK_200000IRQ Fix 和 HPET Fix → ACPI > DSDT > FixHPET_0010 和 ACPI > DSDT > FixIPIC_0040RTC Fix → ACPI > DSDT > FIX_RTC_20000")]),e._v(" "),o("p",[e._v("OS Check Fix（Windows 7）和 OS Check Fix（Windows 8）")]),e._v(" "),o("p",[e._v("HotPatch 的方式是,将调用 _OSI的方法重命名为 XOSI. 然后再放入 SSDT-XOSI.aml 到 Clover > ACPI > Patched\nComment: Change _OSI to XOSIFind: Replace: 复制代码")]),e._v(" "),o("p",[e._v("意思就是,将调用 _OSI 方法的地方都改成调用 XOSI,而 XOSI 方法则是从 SSDT-XOSI.aml 引入的,我们再从 XOSI 方法修补.")]),e._v(" "),o("p",[e._v("Rename GFX0 to IGPU")]),e._v(" "),o("p",[e._v("和上面重命名方法一样")]),e._v(" "),o("p",[e._v("Comment: Rename GFX0 to IGPUFind: Replace: 复制代码\nBrightness fix(Haswell/Broadwell)")]),e._v(" "),o("p",[e._v("这个补丁方法")]),e._v(" "),o("ol",[o("li",[e._v("GFX 重命名为 IGPU,上一节补丁已经应用了.")]),e._v(" "),o("li",[e._v("放入 SSDT-PNLF.aml")]),e._v(" "),o("li",[e._v("SSDT-Config.aml 需要定义 BKLT 的值为 0.")])]),e._v(" "),o("p",[e._v("USB3_PRW 0X6D(instant wake)")]),e._v(" "),o("p",[e._v("这个补丁方法,的方法遇上面的不太一样.")]),e._v(" "),o("p",[e._v("补丁片段")]),e._v(" "),o("h1",{attrs:{id:"some-prw-have-three-entries-in-the-package-into-device-name-adr-0x001d0000-code-regex-name-prw-n-n-n-n-n-remove-matched-找到设备名称地址-0x001d0000-然后移除该设备的-prw-方法-seems-to-work-better-if-prw-is-present-but-returns-0-original-was-3-for-sleep-stateinto-device-name-adr-0x001d0000-insert-begin-name-prw-package-0x6d-0-end-找到设备名称地址-0x001d0000输入变量名-prw-变量内容-0x6d-0-ps-以上纯属猜测-本人未学习过-iasl-的编程语法-全靠蒙-如果错了请指正-复制代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#some-prw-have-three-entries-in-the-package-into-device-name-adr-0x001d0000-code-regex-name-prw-n-n-n-n-n-remove-matched-找到设备名称地址-0x001d0000-然后移除该设备的-prw-方法-seems-to-work-better-if-prw-is-present-but-returns-0-original-was-3-for-sleep-stateinto-device-name-adr-0x001d0000-insert-begin-name-prw-package-0x6d-0-end-找到设备名称地址-0x001d0000输入变量名-prw-变量内容-0x6d-0-ps-以上纯属猜测-本人未学习过-iasl-的编程语法-全靠蒙-如果错了请指正-复制代码"}},[e._v("#")]),e._v(" some _PRW have three entries in the Package into device name_adr 0x001D0000 code_regex Name."),o("em",[e._v("_PRW.")]),e._v("\\n."),o("em",[e._v("\\n.")]),e._v("\\n."),o("em",[e._v("\\n.")]),e._v("\\n.*}) remove_matched;# 找到设备名称地址 0x001D0000 然后移除该设备的 _PRW 方法.# seems to work better if _PRW is present, but returns 0 (original was 3) for sleep stateinto device name_adr 0x001D0000 insert begin Name(_PRW, Package() { 0x6D, 0 }) end;# 找到设备名称地址 0x001D0000输入变量名 _PRW 变量内容 { 0x6D, 0 }PS: 以上纯属猜测,本人未学习过 IASL 的编程语法,全靠蒙,如果错了请指正.复制代码")]),e._v(" "),o("p",[e._v("这样修改后,USB 总线 EHC1和 EHC2 设备中没有了 _PRW 方法了,直接变成了 _PRW 变量.")]),e._v(" "),o("p",[e._v("至于为何需要这样改,我并不清楚,这必须了解 USB 导致睡眠唤醒的代码原理,我看不懂.但是看补丁的修改方法还是会的.")]),e._v(" "),o("p",[e._v("那么将上面的补丁换成 Hotpatch 应该如何表现呢?")]),e._v(" "),o("p",[e._v("搜索了下, DSDT 中还有非常多的 _PRW 方法,他们遍布了整个 DSDT 的各种设备,如果还是使用简单的改名是不可靠的.")]),e._v(" "),o("p",[e._v("因为 Clover 的 Patches 是搜索 DSDT 的二进制版本进行修补,二进制中无法识别整个_PRW 方法是否属于 USB 设备下的,也就是是否属于 EHC1 EHC2 的设备,那么是否就没办法用 Hotpatch 方法来修补这个问题呢?")]),e._v(" "),o("p",[e._v("我们来看看被补丁修补的源代码是什么样的")]),e._v(" "),o("p",[e._v("下面是 EHC1 的 _PRW 方法")]),e._v(" "),o("p",[e._v("Method (_PRW, 0, NotSerialized)// _PRW: Power Resources for Wake    {   Return (GPRW (0x6D, 0x03))    }复制代码")]),e._v(" "),o("p",[e._v("下面是 EHC2 的 _PRW 方法\nMethod (_PRW, 0, NotSerialized)// _PRW: Power Resources for Wake    {   Return (GPRW (0x6D, 0x03))    }复制代码")]),e._v(" "),o("p",[e._v("下面是 XHC 的 _PRW 方法\nMethod (_PRW, 0, NotSerialized)// _PRW: Power Resources for Wake    {   Return (GPRW (0x6D, 0x03))    }复制代码")]),e._v(" "),o("p",[e._v("我们可以发现我们补丁修改的每个 _PRW 方法都会调用一个方法 GPRW,并且调用 GPRW 方法的变量内容都是 0X6D.")]),e._v(" "),o("p",[e._v("再看看 RehabMan 写的 SSDT-PRW.dsl 内容")]),e._v(" "),o("p",[e._v('// For solving instant wake by hooking GPRW or UPRWDefinitionBlock("", "SSDT", 2, "hack", "PRW", 0){  External(XPRW, MethodObj)  // In DSDT, native GPRW is renamed to XPRW with Clover binpatch.  // (or UPRW to XPRW)  // As a result, calls to GPRW (or UPRW) land here.  // The purpose of this implementation is to avoid "instant wake"  // by returning 0 in the second position (sleep state supported)  // of the return package.  Method(GPRW, 2)  {  If (0x6d == Arg0) { Return (Package() { 0x6d, 0, }) } //检查第一个变量是否为 0X6D 如果结果为真,返回 { 0x6d, 0, }  If (0x0d == Arg0) { Return (Package() { 0x0d, 0, }) } //检查第一个变量是否是 0X0D 如果结果为真,返回 { 0x0d, 0, }  Return (XPRW(Arg0, Arg1))           //如果上述都不对,则转跳到 XPRW方法 (函数为转跳过来的值)  }  Method(UPRW, 2)  {  If (0x6d == Arg0) { Return (Package() { 0x6d, 0, }) }  If (0x0d == Arg0) { Return (Package() { 0x0d, 0, }) }  Return (XPRW(Arg0, Arg1))  }}//EOF复制代码')]),e._v(" "),o("p",[e._v("上面的逻辑很清晰了, 其实就是要将我们需要改的地方,直接用代码发回我们希望他得到的变量,那么我们就不必想如何识别哪些是 USB 的 _PRW 方法了.")]),e._v(" "),o("p",[e._v("Hotpatch 我觉得就是,复杂的逻辑交给 ASL 代码来解决, Clover 的 Patch 只需要修改源代码的调用即可.")]),e._v(" "),o("p",[e._v("那么上面多了个 XPRW 是什么东东?为啥其余调用 GPRW 方法都调用他呢?")]),e._v(" "),o("p",[e._v("这个就是 Clover 需要做的,我要将所有原来调用 GPRW 方法的都调用到这个 SSDT-PRW 来,原来的 GPRW 我们更名为 XPRW.")]),e._v(" "),o("p",[e._v("明白了吧?所有代码都经过上面的逻辑,最终跑回被我们更名为 XPRW 的方法(也就是原来的GPRW 方法).")]),e._v(" "),o("p",[e._v("故此应用这个 SSDT 之前,我们需要将 DSDT 原来的 GPRW 方法重命名为 XPRW 方法")]),e._v(" "),o("p",[e._v("但是由遇到了一个问题,如何定位 GPRW 方法在二进制文件 aml 中的位置呢?")]),e._v(" "),o("p",[e._v('小笔记: aml 是 ASL 编程语言编译后的二进制文件,但是我们一般反编译或者 Patch都是讨论十六进制,因为每8个二进制代表一个字符\nRehabMan 在 [Guide] Using Clover to "hotpatch" ACPIRename and Replace 章节有讲到这个问题')]),e._v(" "),o("p",[e._v("大概的意思就是因为不同主板可能情况不同,我们需要使用 Hex Fiend 这样的软件来验证 GPRW 方法的十六进制代码.")]),e._v(" "),o("p",[e._v("方法就是用 Hex Fiend 打开 DSDT 的 aml 文件,然后搜索 GPRW, 你会看到有很多 GPRW, 我的 GPRW 方法在 DSDT 的最下面,所以我直接拉到最下面反向搜索.")]),e._v(" "),o("p",[e._v("最终找到以下十六进制代码")]),e._v(" "),o("p",[e._v("47 50 52 57 02  GPRW复制代码\n再看看 GPRW 的十六进制代码是怎么样的?")]),e._v(" "),o("p",[e._v("neros-MBP:test nero$ echo -n GPRW|xxd00000000: 4750 5257          GPRW复制代码\n奇怪了,为何我在上面列举的代码多了一个 02 ?")]),e._v(" "),o("p",[e._v("我们看看原来 GPRW 方法源代码")]),e._v(" "),o("p",[e._v("Method (GPRW, 2, NotSerialized)  {    Store (Arg0, Index (PRWP, Zero))    Store (ShiftLeft (SS1, One), Local0)    Or (Local0, ShiftLeft (SS2, 0x02), Local0)    Or (Local0, ShiftLeft (SS3, 0x03), Local0)    Or (Local0, ShiftLeft (SS4, 0x04), Local0)    If (And (ShiftLeft (One, Arg1), Local0))    {      Store (Arg1, Index (PRWP, One))    }    Else    {      ShiftRight (Local0, One, Local0)      FindSetLeftBit (Local0, Index (PRWP, One))    }    Return (PRWP)  }复制代码")]),e._v(" "),o("p",[e._v("看到了吧,方法名称紧挨着就是2,这个2就是 02.")]),e._v(" "),o("p",[e._v("翻看 RM 的帖子,再验证了下,发现一个更好的规律和方法")]),e._v(" "),o("p",[e._v("将我们的 DSDT.dsl 文件使用如下命令编译.\niasl -l DSDT.dsl复制代码\n它会产生两个文件")]),e._v(" "),o("p",[e._v("DSDT.aml 编译后文件DSDT.lst 混合列表文件")]),e._v(" "),o("p",[e._v("用文字编辑软件打开 DSDT.lst, 会发现机械码和 iASL 代码混合在一齐,这个就是一个翻译文件一样,列举了各种代码的机械码模式,这样我们就可以更好的找到我们需要打补丁的代码原来是怎么样的.")]),e._v(" "),o("p",[e._v("例如:我们需要将 "),o("code",[e._v("Method (TACH,1")]),e._v(" 的方法重命名为 "),o("code",[e._v("Method(XACH,1")]),e._v(" 来使得 TACH 方法失效,再注入 SSDT 中写入 TACH 方法,来代替它.")]),e._v(" "),o("p",[e._v('那么我只需要搜索 Method (TACH,1 就能找到他机械码的模样.\n22490:    } 22492:    Method (TACH, 1, Serialized)00015565:14 40 06 54 41 43 48 09 ".@.TACH."复制代码')]),e._v(" "),o("p",[e._v("那么我们补丁就可以这样写\nFind:14 40 06 54 41 43 48 09Replace:14 40 06 58 41 43 48 09复制代码\n将我们字符转换成 Hex 形式可以用如下命令")]),e._v(" "),o("p",[e._v('neros-MBP:" nero$ echo -n TACH |xxd00000000: 5441 4348          TACHneros-MBP:" nero$ echo -n XACH |xxd00000000: 5841 4348          XACH复制代码')]),e._v(" "),o("p",[e._v("小结")]),e._v(" "),o("p",[e._v("说了那么多,这个 USB3_PRW 0X6D(instant wake) 唤醒补丁的 Hotpatch 的方法就是")]),e._v(" "),o("ol",[o("li",[e._v("将 DSDT 的 GPRW 方法重命名为 XPRW")]),e._v(" "),o("li",[e._v("放入 RehabMan 写的 SSDT-PRW.aml 到 Clover > ACPI > patch")])]),e._v(" "),o("p",[e._v("PS: 后来测试发现开机的时候系统日志会提示没有找到 UPRW ,这个是因为 SSDT-PRW.aml 包含了 UPRW 这个方法,而这个方法对我来说是没用的,故此放入 SSDT-PRW.aml 后如果不想出现 ACPI Error 的话,最好确认下自己的唤醒是调用 GPRW 还是 UPRW,然后将另一个方法注释掉.")]),e._v(" "),o("p",[e._v("SMBUS Fix")]),e._v(" "),o("p",[e._v("这个补丁就是在 SBUS 加入 BUS0 设备,只需要放入 SSDT-SMBUS.aml 即可.")]),e._v(" "),o("p",[e._v("Rename B0D3 to HDAU")]),e._v(" "),o("p",[e._v("先将 B0D3 重命名为 HDAU\nComment: change B0D3 to HDAU, optionally pair with SSDT-HDAU.amlFind: 42304433Replace: 48444155复制代码")]),e._v(" "),o("p",[e._v("再放入 SSDT-HDAU.aml")]),e._v(" "),o("p",[e._v('注意修改 layout-id 的值为你声卡的 layout-id 值,我声卡的 layout-id 是4\n// Automatic injection of HDAU properties// Note: Only for Haswell and BroadwellDefinitionBlock("", "SSDT", 2, "hack", "HDAU", 0){  External(_SB.PCI0.HDAU, DeviceObj)  External(RMCF.AUDL, IntObj)  // inject properties for audio  Method(_SB.PCI0.HDAU._DSM, 4)  {  If (CondRefOf(\\RMCF.AUDL)) { If (Ones == \\RMCF.AUDL) { Return(0) } }  If (!Arg2) { Return (Buffer() { 0x03 } ) }  Local0 = Package()  {    "layout-id", Buffer(4) { 4, 0, 0, 0 }, //需要注意修改此 layout-id 值    "hda-gfx", Buffer() { "onboard-1" },  }  If (CondRefOf(\\RMCF.AUDL))  {    CreateDWordField(DerefOf(Local0[1]), 0, AUDL)    AUDL = \\RMCF.AUDL  }  Return(Local0)  }}//EOF复制代码')]),e._v(" "),o("p",[e._v("ApplePS2SmartTouchPad 驱动的 Fn 按键补丁")]),e._v(" "),o("p",[e._v("这个补丁需要打上 Fn 功能键才能调整亮度,我们先看看补丁都干了些什么")]),e._v(" "),o("h1",{attrs:{id:"patch-by-emlydinesh-osxlatitude-enables-fn-brightness-keys-to-work-with-my-kext-asusnbfnkeys-replacing-method-q0e-with-code-for-brightness-down-key-to-workinto-method-label-q0e-replace-content-begin-if-atkp-n-n-atkd-iane-0x20-n-end-replacing-method-q0f-with-code-for-brightness-up-key-to-workinto-method-label-q0f-replace-content-begin-if-atkp-n-n-atkd-iane-0x10-n-end-复制代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#patch-by-emlydinesh-osxlatitude-enables-fn-brightness-keys-to-work-with-my-kext-asusnbfnkeys-replacing-method-q0e-with-code-for-brightness-down-key-to-workinto-method-label-q0e-replace-content-begin-if-atkp-n-n-atkd-iane-0x20-n-end-replacing-method-q0f-with-code-for-brightness-up-key-to-workinto-method-label-q0f-replace-content-begin-if-atkp-n-n-atkd-iane-0x10-n-end-复制代码"}},[e._v("#")]),e._v(" Patch by EMlyDinEsH (OSXLatitude)# Enables Fn brightness keys to work with my kext AsusNBFnKeys# Replacing method _Q0E with code for Brightness down key to workinto Method label _Q0E replace_content begin      If (ATKP)\\n      {\\n       ^^^^ATKD.IANE (0x20)\\n      }end;# Replacing method _Q0F with code for Brightness up key to workinto Method label _Q0F replace_content begin      If (ATKP)\\n      {\\n       ^^^^ATKD.IANE (0x10)\\n      }end;复制代码")]),e._v(" "),o("p",[e._v("上面这个补丁是将 _Q0E 方法和 _Q0F 方法的内容替换如下")]),e._v(" "),o("p",[e._v("Method (_Q0E, 0, NotSerialized)// _Qxx: EC Query  {        If (ATKP)    {      ^^^^ATKD.IANE (0x20)    }  }  Method (_Q0F, 0, NotSerialized)// _Qxx: EC Query  {        If (ATKP)    {      ^^^^ATKD.IANE (0x10)    }  }复制代码")]),e._v(" "),o("p",[e._v("参考章节 USB3_PRW 0X6D(instant wake) 的方法.")]),e._v(" "),o("ol",[o("li",[e._v("重命名 _Q0E 方法和 _Q0F 方法为 XQ0E 和 XQ0F,使原先的方法失效.")]),e._v(" "),o("li",[e._v("再放入我们自己定义的 _Q0E 方法和 _Q0F 方法.")])]),e._v(" "),o("p",[e._v("替换 _Q0E 和 _Q0F 方法名称")]),e._v(" "),o("p",[e._v("命令行查找下以上两个方法的十六进制代码")]),e._v(" "),o("p",[e._v("neros-MacBook-Pro:hotpatch nero$ echo -n _Q0E | xxd 00000000: 5f51 3045          _Q0Eneros-MacBook-Pro:hotpatch nero$ echo -n XQ0E | xxd 00000000: 5851 3045          XQ0Eneros-MacBook-Pro:hotpatch nero$ echo -n _Q0F | xxd 00000000: 5f51 3046          _Q0Fneros-MacBook-Pro:hotpatch nero$ echo -n XQ0F | xxd 00000000: 5851 3046          XQ0F复制代码")]),e._v(" "),o("p",[e._v("那么在 Clover 配置文件 ACPI > DSDT > Patches 写入如下补丁")]),e._v(" "),o("p",[e._v("#补丁-1Comment: change _Q0E to XQ0E, optionally pair with SSDT-Fn.amlFind: 5f51 3045Replace: 5851 3045#补丁-2Comment: change _Q0F to XQ0F, optionally pair with SSDT-Fn.amlFind: 5f51 3046Replace: 5851 3046复制代码")]),e._v(" "),o("p",[e._v("如果觉得不放心,可以用 Hex Fiend 打开 DSDT.aml 文件来搜索替换一下,之后再用 iasl 来反编译,再用 MaciASL dsl 文件看看,是否已经被重命名为 XQ0E 和 XQ0F")]),e._v(" "),o("p",[e._v("重定义新的 _Q0E 和 _Q0F 方法")]),e._v(" "),o("p",[e._v('我不会编写 SSDT, 但是我会抄"')]),e._v(" "),o("p",[e._v("复制一份 SSDT-PRW.dsl 下来重命名为 SSDT-FN.dsl")]),e._v(" "),o("p",[e._v("用 MaciASL 打开.")]),e._v(" "),o("p",[e._v("将其修改为如下代码")]),e._v(" "),o("p",[e._v('//Enables Fn brightness keys to work with my kext AsusNBFnKeysDefinitionBlock("", "SSDT", 2, "hack", "Fn", 0){  // In DSDT, native _Q0E and _Q0F is renamed to XQ0E and XQ0F with Clover binpatch.  // (or UPRW to XPRW)  // As a result, calls to _Q0E and _Q0F land here.    External(ATKP, IntObj)  External(_SB.ATKD.IANE, MethodObj)  External(_SB.PCI0.LPCB.EC0, DeviceObj)    Scope(_SB.PCI0.LPCB.EC0)  {  Method (_Q0E, 0, NotSerialized)// _Qxx: EC Query    {          If (ATKP)      {      _SB.ATKD.IANE (0x20)      }    }  Method (_Q0F, 0, NotSerialized)// _Qxx: EC Query  {        If (ATKP)    {      _SB.ATKD.IANE (0x10)    }  }  }}//EOF复制代码')]),e._v(" "),o("p",[e._v('PS:以上代码纯属乱搞,如果能用,纯属巧合哈"经过测试，上面是生效的！')]),e._v(" "),o("p",[e._v("最终将此 SSDT-FN.dsl 编译成 aml, 再放入 Clover > ACPI > patches")]),e._v(" "),o("p",[e._v("神灵保佑！千万不要吃字。（ 唵嘛呢叭咪吽！！！！）\n由于字数限制未完待续，但是论坛有审核，我不清楚是否能够在沙发续贴。")]),e._v(" "),o("p",[e._v("附件中有我修改好的整个 VM510LI 的 EFI 例子，还有写好的 DSL 文件，也提供了我的 VM510LI 提取的 ACPI 文件。")]),e._v(" "),o("p",[e._v("附件: 你需要登录才可以下载或查看附件。没有帐号？注册")]),e._v(" "),o("p",[e._v("继续上一楼")]),e._v(" "),o("p",[e._v("电池补丁方法分析")]),e._v(" "),o("p",[e._v("根据发米论坛的教学贴,我学会了编写自己笔记本的电池电量补丁.")]),e._v(" "),o("p",[e._v("以下是我 华硕 VM510LI 的电量补丁\n#Maintained by: Nero for: Laptop Patches#battery_ASUS-VM510LI.txt# created by Nero 1/2017#Create B1B2 Methodinto method label B1B2 remove_entry;into definitionblock code_regex . insertbeginMethod (B1B2, 2, NotSerialized)\\n{\\nReturn(Or(Arg0, ShiftLeft(Arg1, 8)))\\n}\\nend;# utility methods to read/write buffers from/to ECinto method label RE1B parent_label EC0 remove_entry;into method label RECB parent_label EC0 remove_entry;into device label EC0 insertbeginMethod (RE1B, 1, NotSerialized)\\n{\\n  OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n  Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\\n  Return(BYTE)\\n}\\nMethod (RECB, 2, Serialized)\\n{\\n  ShiftRight(Arg1, 3, Arg1)\\n  Name(TEMP, Buffer(Arg1) { })\\n  Add(Arg0, Arg1, Arg1)\\n  Store(0, Local0)\\n  While (LLess(Arg0, Arg1))\\n  {\\n  Store(RE1B(Arg0), Index(TEMP, Local0))\\n  Increment(Arg0)\\n  Increment(Local0)\\n  }\\n  Return(TEMP)\\n}\\nend;# utility method to write to EC buffersinto method label WE1B parent_label EC0 remove_entry;into method label WECB parent_label EC0 remove_entry;into device label EC0 insertbeginMethod (WE1B, 2, NotSerialized)\\n{\\n  OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\\n  Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\\n  Store(Arg1, BYTE)\\n}\\nMethod (WECB, 3, Serialized)\\n{\\n  ShiftRight(Arg1, 3, Arg1)\\n  Name(TEMP, Buffer(Arg1) { })\\n  Store(Arg2, TEMP)\\n  Add(Arg0, Arg1, Arg1)\\n  Store(0, Local0)\\n  While (LLess(Arg0, Arg1))\\n  {\\n  WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\\n  Increment(Arg0)\\n  Increment(Local0)\\n  }\\n}\\nend;#Convert 16 bit to 8 bit registersinto device label EC0 code_regex TAH0,\\s+16, replace_matched begin TA00,8,TA01,8, end;into device label EC0 code_regex TAH1,\\s+16, replace_matched begin TA20,8,TA21,8, end;into device label EC0 code_regex B0C3,\\s+16, replace_matched begin B001,8,B002,8, end;into device label EC0 code_regex B0SN,\\s+16, replace_matched begin B0S0,8,B0S1,8, end;into device label EC0 code_regex B1SN,\\s+16 replace_matched begin B1S0,8,B1S1,8 end;into device label EC0 code_regex DT2B,\\s+16 replace_matched begin DT01,8,DT02,8 end;#Fix 16 bit registersinto method label TACH code_regex (TAH0, replaceall_matched begin (B1B2(TA00,TA01), end;into method label TACH code_regex (TAH1, replaceall_matched begin (B1B2(TA20,TA21), end;into method label _BIX code_regex ^^LPCB.EC0.B0C3, replaceall_matched begin B1B2(^^LPCB.EC0.B001,^^LPCB.EC0.B002), end;into method label BIFA code_regex (B0SN, replaceall_matched begin (B1B2(B0S0,B0S1), end;into method label BIFA code_regex (B1SN, replaceall_matched begin (B1B2(B1S0,B1S1), end;into method label SMBR code_regex (DT2B, replaceall_matched begin (B1B2(DT01,DT02), end;into method label SMBW code_regex Store\\s(Arg4,\\sDT2B) replaceall_matched begin Store (ShiftRight(Arg4,8),DT02)\\nStore (Arg4,DT01) end;#fix 256 bit registersinto method label SMBR code_regex Store\\s+((."),o("em",[e._v("),\\s+BDAT) replaceall_matched begin WECB(0x1c,256,%1) end;into method label SMBW code_regex Store\\s+((.")]),e._v("),\\s+BDAT) replaceall_matched begin WECB(0x1c,256,%1) end;into method label ECSB code_regex Store\\s+((."),o("em",[e._v("),\\s+BDAT) replaceall_matched begin WECB(0x1c,256,%1) end;into method label ECSB code_regex Store\\s+((.")]),e._v("),\\s+BDA2) replaceall_matched begin WECB(0x44,256,%1) end;into method label ECSB code_regex (BDAT, replaceall_matched begin (RECB(0x1c,256), end;into method label ECSB code_regex (BDA2, replaceall_matched begin (RECB(0x44,256), end;into method label SMBR code_regex (BDAT, replaceall_matched begin (RECB(0x1c,256), end;复制代码")]),e._v(" "),o("p",[e._v("大家都知道电量修补是一项非常复杂的修改,需要将调用到的变量高于8位的数值拆分成8位来处理.")]),e._v(" "),o("p",[e._v("故此修改代码量非常多,并且变量名称均需要重命名及重新赋值.")]),e._v(" "),o("p",[e._v("Hotpatch 因为是注入 SSDT 来实现补丁效果,故此我们需要找到补丁修改的各个变量赋值与函数调用的变量.")]),e._v(" "),o("p",[e._v("RM 教给大家一个办法,先将 DSDT.dsl 打上电池补丁,然后另存为 DSDT-Patch.dsl 然后使用 DiffMerge 来对比两个文件的修改代码的情况,就可以最简单的知道补丁到底修改了哪些变量.")]),e._v(" "),o("p",[e._v("当然读懂补丁的语法其实并不需要这样做,我们可以读一下补丁到底修改了哪些变量,做了哪些操作就可以了,这个补丁是我自己写的,所以我并不需要用 DiffMerge 来查询.")]),e._v(" "),o("p",[e._v("经过研究,我发现单纯用 Clover Patches 方式来修改变量是行不通的,因为例如")]),e._v(" "),o("p",[e._v("//拆分前TAH0,16   Hex: 54 41 48 30 10//拆分后TA01,8,TA02,8 Hex: 54 41 30 31 08 54 41 30 32 08复制代码")]),e._v(" "),o("p",[e._v("拆分前是占用5个字节,拆分后我们需要10个字节的空间,这样打补丁的话,会导致 TAH0 下面的变量被覆盖,导致出错.")]),e._v(" "),o("p",[e._v("那么如此大量的变量更改,我们应当如何修改呢?")]),e._v(" "),o("p",[e._v("我参考了 RM 给 HP ProBook 的电量补丁以及 Hotpatch 电量修补 SSDT")]),e._v(" "),o("p",[e._v("SSDT:https://raw.githubusercontent.com/RehabMan/HP-ProBook-4x30s-DSDT-Patch/master/hotpatch/SSDT-BATT.dsl")]),e._v(" "),o("p",[e._v("电量补丁:https://raw.githubusercontent.com/RehabMan/HP-ProBook-4x30s-DSDT-Patch/master/patches/06_Battery.txt")]),e._v(" "),o("p",[e._v("发现他的解决办法如下")]),e._v(" "),o("ol",[o("li",[e._v("新建一个 SSDT 写入 EC 方法,方法中赋予我们拆分后的电池变量.")]),e._v(" "),o("li",[e._v("在新建的 SSDT 中复制修改好的方法.")]),e._v(" "),o("li",[e._v("利用 MaciASL 编译功能来协助检查缺少的 External().")]),e._v(" "),o("li",[e._v("将原来调用电池变量的方法一一用 Clover Patches 更名(将原来的方法全部禁用).")])]),e._v(" "),o("p",[e._v("将 EC 赋值的需要拆分的变量写入到 SSDT-BATT.dsl")]),e._v(" "),o("p",[e._v("我不会写 SSDT, 但是我会抄.抄 RM 写的 SSDT 再修改")]),e._v(" "),o("p",[e._v("下面是 EC0 设备拆分后的代码")]),e._v(" "),o("p",[e._v('// battery status patched for Ausu VM510LIDefinitionBlock ("", "SSDT", 2, "hack", "batt", 0){  External(_SB.PCI0, DeviceObj)  External(_SB.PCI0.LPCB, DeviceObj)  External(_SB.PCI0.LPCB.EC0, DeviceObj)  Scope(_SB.PCI0.LPCB.EC0)  {  // This is an override for battery methods that access EC fields  // larger than 8-bit.  OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)  Field (ECOR, ByteAcc, Lock, Preserve)  {    //Offset (0x04),     //CMD1, 8,     //...    Offset (0x93),    TA00,8,TA01,8,     TA20,8,TA21,8,     //...    Offset (0xBE),     , 16, //B0TM, 16    , 16, //B0C1, 16,    , 16, //B0C2, 16,    B001,8,B002,8,     //...    Offset (0xF4),     B0S0,8,B0S1,8,     //Offset (0xF8),     //Offset (0xFA),     Offset (0xFC),     B1S0,8,B1S1,8  }  OperationRegion (SMBX, EmbeddedControl, 0x18, 0x28)  Field (SMBX, ByteAcc, NoLock, Preserve)  {    Offset (0x04),     DT01,8,DT02,8  }    }}复制代码')]),e._v(" "),o("p",[e._v("其中 "),o("code",[e._v("OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)")]),e._v(" 和 "),o("code",[e._v("OperationRegion (SMBX, EmbeddedControl, 0x18, 0x28)")]),e._v(" 原来的 DSDT 都存在,按照 RM 修改的方法,他的方式应该是从每个 "),o("code",[e._v("Offset (0X00)")]),e._v(" 偏移量定义去写,如果偏移量下面第四个才是需要拆的,那么上面的可以使用 "),o("code",[e._v(", 16,")]),e._v(" 这种方法来代替偏移量,好像这样就不会覆盖到原先的变量.(猜测罢了)")]),e._v(" "),o("p",[e._v("将调用了以上变量的方法复制到 SSDT-BATT.dsl")]),e._v(" "),o("p",[e._v("从已经打了电量补丁的 DSDT 中找出上方调用这些变量的方法所在地,不要忘记了补丁中 #fix 256 bit registers 的方法,因为电量补丁中,大于32的变量无需拆分,只需要将调动变量的代码用 WECB 方法与 RECB 方法来更改代替即可.")]),e._v(" "),o("ul",[o("li",[e._v("Method (TACH, 1, Serialized)  - TA00  - TA01  - TA20  - TA21- Method (_BIX, 0, NotSerialized)  - B001  - B002- Method (BIFA, 0, NotSerialized)  - B0S0  - B0S1  - B1S0  - B1S1- Method (SMBR, 3, Serialized)  - WECB(0x1c,256,Zero)  - WECB(0x1c,256,Zero)  - WECB(0x1c,256,Arg4)  - Store (RECB(0x1c,256), Index (Local0, 0x02))- Method (ECSB, 7, NotSerialized)  - WECB(0x1c,256,DerefOf (Index (Arg6, One)))  - WECB(0x44,256,DerefOf (Index (Arg6, One)))  - Store (RECB(0x1c,256), Index (Local1, 0x04))  - Store (RECB(0x44,256), Index (Local1, 0x04))- Method (SMBW, 5, Serialized)  - Store (ShiftRight(Arg4,8),DT02)  - Store (Arg4,DT01)复制代码")])]),e._v(" "),o("p",[e._v("总共发现6个方法,我们将这6个方法一个一个从修不好电量补丁的 DSDT 中复制到 SSDT-BATT.dsl")]),e._v(" "),o("p",[e._v("TACH 方法")]),e._v(" "),o("p",[e._v("Method (TACH, 1, Serialized)  {    Name (_T_0, Zero)// _T_x: Emitted by ASL Compiler    If (ECAV ())    {      While (One)      {      Store (Arg0, _T_0)      If (LEqual (_T_0, Zero))      {        Store (B1B2(TA00,TA01), Local0)        Break      }      ElseIf (LEqual (_T_0, One))      {        Store (B1B2(TA20,TA21), Local0)        Break      }      Else      {        Return (Ones)      }      Break      }      Multiply (Local0, 0x02, Local0)      If (LNotEqual (Local0, Zero))      {      Divide (0x0041CDB4, Local0, Local1, Local0)      Return (Local0)      }      Else      {      Return (Ones)      }    }    Else    {      Return (Ones)    }  }复制代码")]),e._v(" "),o("p",[e._v("当你复制这个方法到 SSDT-BATT.dsl 时候,编译时会遇到一个错误.(这里我已经将拆分需要的 B1B2,WE1B,WECB,RE1B,RECB 等方法放入 "),o("code",[e._v("Scope(\\_SB.PCI0.LPCB.EC0)")]),e._v(" 域里面)")]),e._v(" "),o("p",[e._v("49, 6084, Object does not exist (ECAV)")]),e._v(" "),o("p",[e._v("看看 ECAV 是哪行调用的.")]),e._v(" "),o("p",[e._v("Name (_T_0, Zero)// _T_x: Emitted by ASL Compiler    If (ECAV ())    {复制代码")]),e._v(" "),o("p",[e._v("这个是一个判断语句内嵌了一个方法的调用,初步判断 ECAV 就是一个方法,那么这个方法在哪里呢?回到我们的 DSDT.dsl")]),e._v(" "),o("p",[e._v("搜索 ECAV ,你会在 _SB.PCI0.LPCB.EC0 中发现 ECAV 这个方法,那么我们需要在 SSDT-BATT.dsl 中外部引入这个方法,来达到编译通过的目的.")]),e._v(" "),o("p",[e._v("只需要在 TACH 上方写入 "),o("code",[e._v("External(\\_SB.PCI0.LPCB.EC0.ECAV, MethodObj)")])]),e._v(" "),o("p",[e._v("再次编译,已通过编译.")]),e._v(" "),o("p",[e._v("我们需要注意的是外部引入的路径与外部引入的类型.")]),e._v(" "),o("p",[e._v("路径在 MaciASL 中,只要你光标移动到这个方法上,程序的左下角会显示当前方法(或变量)所在的路径.")]),e._v(" "),o("p",[e._v("一般 Name ( ABCD , 0X10) 这类的变量引入我们使用 IntObj 类型引入.")]),e._v(" "),o("p",[e._v("而上述的 Method (ECAV, 0, NotSerialized) 这一类,当然是使用 MethodObj 类型引入了.")]),e._v(" "),o("p",[e._v("注意,复制方法过来的时候,需要注意该方法本来是在哪个域里面的,我们在 SSDT-BATT.dsl 也要将其放到哪个域里 Scope（）")]),e._v(" "),o("p",[e._v("例如:Method (_BIX, 0, NotSerialized)")]),e._v(" "),o("p",[e._v("这个方法是在 _SB.PCI0.BAT0 这个域里面,那么我们需要将_BIX 方法放在这个域里面")]),e._v(" "),o("p",[e._v("External(_SB.PCI0, DeviceObj)External(_SB.PCI0.BAT0, DeviceObj)  Scope(_SB.PCI0.BAT0)  {    Method (_BIX, 0, NotSerialized)// _BIX: Battery Information Extended    {      If (LNot (^^LPCB.EC0.BATP (Zero)))      {      Return (NBIX)      }      If (LEqual (^^LPCB.EC0.GBTT (Zero), 0xFF))      {      Return (NBIX)      }      _BIF ()      Store (DerefOf (Index (PBIF, Zero)), Index (BIXT, One))      Store (DerefOf (Index (PBIF, One)), Index (BIXT, 0x02))      Store (DerefOf (Index (PBIF, 0x02)), Index (BIXT, 0x03))      Store (DerefOf (Index (PBIF, 0x03)), Index (BIXT, 0x04))      Store (DerefOf (Index (PBIF, 0x04)), Index (BIXT, 0x05))      Store (DerefOf (Index (PBIF, 0x05)), Index (BIXT, 0x06))      Store (DerefOf (Index (PBIF, 0x06)), Index (BIXT, 0x07))      Store (DerefOf (Index (PBIF, 0x07)), Index (BIXT, 0x0E))      Store (DerefOf (Index (PBIF, 0x08)), Index (BIXT, 0x0F))      Store (DerefOf (Index (PBIF, 0x09)), Index (BIXT, 0x10))      Store (DerefOf (Index (PBIF, 0x0A)), Index (BIXT, 0x11))      Store (DerefOf (Index (PBIF, 0x0B)), Index (BIXT, 0x12))      Store (DerefOf (Index (PBIF, 0x0C)), Index (BIXT, 0x13))      If (LEqual (DerefOf (Index (BIXT, One)), One))      {      Store (Zero, Index (BIXT, One))      Store (DerefOf (Index (BIXT, 0x05)), Local0)      Multiply (DerefOf (Index (BIXT, 0x02)), Local0, Index (BIXT, 0x02))      Multiply (DerefOf (Index (BIXT, 0x03)), Local0, Index (BIXT, 0x03))      Multiply (DerefOf (Index (BIXT, 0x06)), Local0, Index (BIXT, 0x06))      Multiply (DerefOf (Index (BIXT, 0x07)), Local0, Index (BIXT, 0x07))      Multiply (DerefOf (Index (BIXT, 0x0E)), Local0, Index (BIXT, 0x0E))      Multiply (DerefOf (Index (BIXT, 0x0F)), Local0, Index (BIXT, 0x0F))      Divide (DerefOf (Index (BIXT, 0x02)), 0x03E8, Local0, Index (BIXT, 0x02))      Divide (DerefOf (Index (BIXT, 0x03)), 0x03E8, Local0, Index (BIXT, 0x03))      Divide (DerefOf (Index (BIXT, 0x06)), 0x03E8, Local0, Index (BIXT, 0x06))      Divide (DerefOf (Index (BIXT, 0x07)), 0x03E8, Local0, Index (BIXT, 0x07))      Divide (DerefOf (Index (BIXT, 0x0E)), 0x03E8, Local0, Index (BIXT, 0x0E))      Divide (DerefOf (Index (BIXT, 0x0F)), 0x03E8, Local0, Index (BIXT, 0x0F))      }      Store (B1B2(^^LPCB.EC0.B001,^^LPCB.EC0.B002), Index (BIXT, 0x08))      Store (0x0001869F, Index (BIXT, 0x09))      Return (BIXT)    }  }复制代码")]),e._v(" "),o("p",[e._v("复制了之后,我们还有非常多的错误需要处理")]),e._v(" "),o("p",[e._v("135, 6085, Object not found or not accessible from scope (^^LPCB.EC0.BATP)")]),e._v(" "),o("p",[e._v("代码段: If (LNot (^^LPCB.EC0.BATP (Zero)))")]),e._v(" "),o("p",[e._v("^^LPCB.EC0.BATP 这个方法写法中存在 ^^这两个字符,意思上级的上级域里面的,类似于相对路径, LPCB.EC.BATP 方法,完整路径就是 _SB.PCI0.LPCB.EC0.BATP,因为这个方法不在我们的 SSDT 里面,故此我们需要外部引入他.在 External 的部分加入 "),o("code",[e._v("External(\\_SB.PCI0.LPCB.EC0.BATP, MethodObj)")])]),e._v(" "),o("p",[e._v("但是上面的 ^^LPCB.EC0.BATP 这样的调用方法猜测应该是同一 SSDT 或是在 DSDT 中存在才能这样写,如果是外部引入后,我们需要将其改成绝对路径.")]),e._v(" "),o("p",[e._v("将 "),o("code",[e._v("^^LPCB.EC0.BATP")]),e._v(" 替换成 "),o("code",[e._v("\\_SB.PCI0.LPCB.EC0.BATP")]),e._v(".")]),e._v(" "),o("p",[e._v("140, 6084, Object does not exist (NBIX)")]),e._v(" "),o("p",[e._v("代码段:Return (NBIX)")]),e._v(" "),o("p",[e._v("这个返回值应该是一个变量,我们看看 DSDT 下他是如何定义的.")]),e._v(" "),o("p",[e._v('Name (NBIX, Package (0x14)    {      Zero,       Zero,       0xFFFFFFFF,       0xFFFFFFFF,       One,       0xFFFFFFFF,       0xFFFFFFFF,       0xFFFFFFFF,       Zero,       0xFFFFFFFF,       0xFFFFFFFF,       0xFFFFFFFF,       0xFFFFFFFF,       0xFFFFFFFF,       0xFFFFFFFF,       0xFFFFFFFF,       "",       "",       "",       ""    })复制代码')]),e._v(" "),o("p",[e._v("Name (NBIX, Package (0x14)它是一个对象集,对象集引入的类型应当是 PkgObj")]),e._v(" "),o("p",[e._v("在头部外部引入部分加入"),o("code",[e._v("External(\\_SB.PCI0.BAT0.NBIX, PkgObj)")])]),e._v(" "),o("p",[e._v("剩下错误用同类的方法修补")]),e._v(" "),o("p",[e._v("最终复制完整个 SSDT-BATT.dsl 是这样的: （由于字数限制问题，例子可以查看上楼附件中的 SSDT-BATT-VM510LI.dsl）")]),e._v(" "),o("p",[e._v("好了,以上 SSDT 编译已经通过,那么我们进行最后一步,将上述复制过来的 Method 一一的重命名,使得原有的 Method 失效,这样我们注入的 SSDT 的新 Method 才能生效.")]),e._v(" "),o("p",[e._v("我们需要重命名的 Method 有")]),e._v(" "),o("ul",[o("li",[e._v("Method (TACH, 1, Serialized)- Method (_BIX, 0, NotSerialized)- Method (BIFA, 0, NotSerialized)- Method (SMBR, 3, Serialized)- Method (ECSB, 7, NotSerialized)- Method (SMBW, 5, Serialized)复制代码")])]),e._v(" "),o("p",[e._v("在 config.plist 中编写补丁 ACPI > DSDT > Patches")]),e._v(" "),o("h1",{attrs:{id:"tachcomment-change-method-tach-1-n-to-xach-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-40-06-54-41-43-48-09replace-14-40-06-58-41-43-48-09-bixcomment-change-method-bix-0-n-to-xbix-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-49-26-5f-42-49-58-00replace-14-49-26-58-42-49-58-00-bifacomment-change-method-bifa-0-n-to-xifa-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-27-42-49-46-41-00replace-14-27-58-49-46-41-00-smbrcomment-change-method-smbr-3-n-to-xmbr-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-4b-13-53-4d-42-52-0breplace-14-4b-13-58-4d-42-52-0b-ecsbcomment-change-method-ecsb-7-n-to-xcsb-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-4f-1a-45-43-53-42-07-replace-14-4f-1a-58-43-53-42-07-smbwcomment-change-method-smbw-5-n-to-xmbw-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-45-10-53-4d-42-57-0dreplace-14-45-10-58-4d-42-57-0d复制代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tachcomment-change-method-tach-1-n-to-xach-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-40-06-54-41-43-48-09replace-14-40-06-58-41-43-48-09-bixcomment-change-method-bix-0-n-to-xbix-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-49-26-5f-42-49-58-00replace-14-49-26-58-42-49-58-00-bifacomment-change-method-bifa-0-n-to-xifa-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-27-42-49-46-41-00replace-14-27-58-49-46-41-00-smbrcomment-change-method-smbr-3-n-to-xmbr-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-4b-13-53-4d-42-52-0breplace-14-4b-13-58-4d-42-52-0b-ecsbcomment-change-method-ecsb-7-n-to-xcsb-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-4f-1a-45-43-53-42-07-replace-14-4f-1a-58-43-53-42-07-smbwcomment-change-method-smbw-5-n-to-xmbw-optionally-pair-with-ssdt-batt-vm510li-amlfind-14-45-10-53-4d-42-57-0dreplace-14-45-10-58-4d-42-57-0d复制代码"}},[e._v("#")]),e._v(" TACHComment: change Method(TACH,1,N) to XACH, optionally pair with SSDT-BATT-VM510LI.amlFind:14 40 06 54 41 43 48 09Replace:14 40 06 58 41 43 48 09# _BIXComment: change Method(_BIX,0,N) to XBIX, optionally pair with SSDT-BATT-VM510LI.amlFind:14 49 26 5F 42 49 58 00Replace:14 49 26 58 42 49 58 00# BIFAComment: change Method(BIFA,0,N) to XIFA, optionally pair with SSDT-BATT-VM510LI.amlFind:14 27 42 49 46 41 00Replace:14 27 58 49 46 41 00# SMBRComment: change Method(SMBR,3,N) to XMBR, optionally pair with SSDT-BATT-VM510LI.amlFind:14 4B 13 53 4D 42 52 0BReplace:14 4B 13 58 4D 42 52 0B# ECSBComment: change Method(ECSB,7,N) to XCSB, optionally pair with SSDT-BATT-VM510LI.amlFind:14 4F 1A 45 43 53 42 07 Replace:14 4F 1A 58 43 53 42 07 # SMBWComment: change Method(SMBW,5,N) to XMBW, optionally pair with SSDT-BATT-VM510LI.amlFind:14 45 10 53 4D 42 57 0DReplace:14 45 10 58 4D 42 57 0D复制代码")]),e._v(" "),o("p",[e._v("提示,不放心自己找的代码,可以拿个从 Ubuntu 提取未修改过的 DSDT.aml, 用 Hex Fiend 来替换下,再反编译看看,反编译后无需修改,直接搜索我们修改的变量名,看是否已经改成 X 开头.")]),e._v(" "),o("p",[e._v("注入显卡 ID")]),e._v(" "),o("p",[e._v("将 GFX 更名为 IGPU放入 SSDT-IGPU.aml 至 Clover > ACPI > patched")]),e._v(" "),o("p",[e._v("未完下楼续")]),e._v(" "),o("p",[e._v("屏蔽独立显卡")]),e._v(" "),o("p",[e._v("首先复习一下屏蔽独立显卡的方法:\n引用自:"),o("a",{attrs:{href:"https://www.firewolf.science/2015/05/%E5%B1%8F%E8%94%BD%E5%8F%8C%E6%98%BE%E5%8D%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E7%8B%AC%E6%98%BE/",target:"_blank",rel:"noopener noreferrer"}},[e._v("屏蔽双显卡笔记本的独显"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("我们的目标非常简单。通常，在SSDT里，笔记本给我们提供了一个 _OFF 方法，我们可以通过调用这个方法，来切段独显的供电。最最简单的方法，就是在 相应的_INI方法里，调用_OFF方法。需要注意，这个_OFF方法，还可能会在DSDT里，或者可能会有不同的名字（如：GPOF、OPOF、_PS3，等等）。")]),e._v(" "),o("p",[e._v("某些_OFF方法的实现，会由于它包含了对EC(Embedded Controller)的依赖，而使得它不能在_INI方法里被调用。对于这样的情况，整个_OFF方法或者它的一部分代码，需要被移动到_REG方法里，以延迟执行（当_REG方法接收的参数Arg0 == 3 且 Arg1==1时，它会在_INI方法之后被执行）（详见ACPI规范）。对于一些情况，在_REG方法里调用_OFF的时机太迟了，从而导致要么屏蔽独显失败，要么系统五国。对于这样的情况，修改_OFF方法，移除它对于EC的依赖，将变得必要。之后，我们就可以在_INI里调用它（移除了对EC的依赖的_OFF）。同时，在_OFF里移除的代码，需要加到_REG里去。这样，虽然EC关联的代码在后（_INI后）执行（因为代码加到了_REG里，所以后执行），但却能达到更好的效果。贴子提供的例子，就是这种情况。\n我是根据上面的方法来屏蔽我华硕 VM510LI 的 AMD 显卡的,很不幸的是,我的 _OFF 也包含了对 EC 的依赖,故此我在 hotpatch 当中,我并不能单纯的使用 SSDT-Disable_DGPU.aml 来禁用独立显卡.")]),e._v(" "),o("p",[e._v("那么该如何使用 hotpatch 方法来屏蔽我们的独立显卡呢?")]),e._v(" "),o("p",[e._v("于是我扒到了这个帖子:https://www.tonymacx86.com/threads/guide-disabling-discrete-graphics-in-dual-gpu-laptops.163772/page-55#post-1232166")]),e._v(" "),o("p",[e._v("帖子提供了一个例子：https://raw.githubusercontent.com/RehabMan/Lenovo-Z50/master/hotpatch/SSDT-NVDA.dsl")]),e._v(" "),o("p",[e._v("仔细查看例子中的代码会发现和上述屏蔽独立显卡不同的地方.")]),e._v(" "),o("p",[e._v('External(_SB.PCI0, DeviceObj)  Scope(_SB.PCI0)  {  Device(RMD2)  {    Name(_HID, "RMD20000")    Method(_INI)    {     If (CondRefOf(_SB.PCI0.RP05.PEGP._OFF)) { _SB.PCI0.RP05.PEGP._OFF() }    }  }复制代码')]),e._v(" "),o("p",[e._v("看上述的代码段,他会重新定义一个设备,这个设备叫 RMD20000,然后这个设备有一个 INI 方法,里面就是调用 _OFF, 关闭显卡的系统方法.")]),e._v(" "),o("p",[e._v("那么,其实关闭显卡并不一定要在显卡启动的 INI 方法中运行 OFF 切断显卡电源,我估计是 PCI0 的设备是统一时间初始化的,其他设备的 INI 也一样可以将显卡电源关闭.")]),e._v(" "),o("p",[e._v("而我 _OFF 方法中存在一个 SGOF 的方法,这个方法里面调用了 EC0 的代码,那么需要将他去掉,故此我需要用重命名代替的方法,将原来的 SGOF 方法用重命名方法禁用掉,然后再用 SSDT 注入我们修改的 SGOF 方法, 由于 SGOF 方法中的 EC 相关的代码需要在 _REG 中执行,故此我们也需要将原有的 _REG 方法重命名禁用掉,也在 SSDT 中写入我们的 _REG 方法.")]),e._v(" "),o("p",[e._v("依然老方法,我不会写 SSDT, 但是我会抄.用上述的 SSDT-NVDA.dsl 来改成我们自己的 禁用显卡 SSDT.")]),e._v(" "),o("p",[e._v("最终写出来的 SSDT 应该就是这样")]),e._v(" "),o("p",[e._v('// SSDT-DAMD: Disable AMDDefinitionBlock ("", "SSDT", 2, "hack", "DAMD", 0){  External(_SB.PCI0, DeviceObj)  External(_SB.PCI0.RP05.PEGP._OFF,MethodObj)  External (HLRS, FieldUnitObj)  External (PWEN, FieldUnitObj)  Scope(_SB.PCI0)  {  Device(RMD2)  {    Name(_HID, "RMD20000")    Method(_INI)    {     If (CondRefOf(_SB.PCI0.RP05.PEGP._OFF)) { _SB.PCI0.RP05.PEGP._OFF() }    }  }    External(RP05, DeviceObj)  Scope(RP05)  {    External(PEGP, DeviceObj)    Scope(PEGP)    {      External(CCHK, MethodObj)      External(ONOF, IntObj)      External(LCTL,IntObj)      External(ELCT, IntObj)      External(SVID, IntObj)      External(HVID, IntObj)      External(SDID, IntObj)      External(HDID, IntObj)      External(LNKD, IntObj)      External(LNKD, IntObj)      External(LNKS, IntObj)      External(SGPO, MethodObj)      Method (SGOF, 0, Serialized)      {      If (LEqual (CCHK (Zero), Zero))      {        Return (Zero)      }      Store (Zero, ONOF)      //Store (_SB.PCI0.LPCB.EC0.RRAM (0x0521), Local0)      //And (Local0, 0xCF, Local0)      //_SB.PCI0.LPCB.EC0.WRAM (0x0521, Local0)      //_SB.PCI0.LPCB.EC0.WRAM (0x0520, 0x91)      //_SB.PCI0.LPCB.EC0.WRAM (0x03A4, Zero)      //_SB.PCI0.LPCB.EC0.WRAM (0x03A5, Zero)      Store (LCTL, ELCT)      Store (SVID, HVID)      Store (SDID, HDID)      Store (One, LNKD)      While (LNotEqual (LNKS, Zero))      {        Sleep (One)      }      SGPO (HLRS, One)      SGPO (PWEN, Zero)      Return (Zero)      }    }  }    External(LPCB, DeviceObj)  Scope(LPCB)  {    External(EC0, DeviceObj)    Scope(EC0)    {      External(ECFL, IntObj)      External(RRAM, MethodObj)      External(WRAM, MethodObj)      Method (_REG, 2, NotSerialized)// _REG: Region Availability      {      If (LEqual (Arg0, 0x03))      {        Store (Arg1, ECFL)      }            If (LAnd(LEqual(Arg0,3),LEqual(Arg1,1)))      {        Store (_SB.PCI0.LPCB.EC0.RRAM (0x0521), Local0)        And (Local0, 0xCF, Local0)        _SB.PCI0.LPCB.EC0.WRAM (0x0521, Local0)        _SB.PCI0.LPCB.EC0.WRAM (0x0520, 0x91)        _SB.PCI0.LPCB.EC0.WRAM (0x03A4, Zero)        _SB.PCI0.LPCB.EC0.WRAM (0x03A5, Zero)      }      }    }  }  }}复制代码')]),e._v(" "),o("p",[e._v("然后我们需要重命名的就是两个方法,一个 SGOF, 和 _REG.")]),e._v(" "),o("p",[e._v("在 Clover > ACPI > DSDT > Patches 添加如下")]),e._v(" "),o("h1",{attrs:{id:"sgofcomment-change-method-sgof-0-serialized-to-xgof-optionally-pair-with-ssdt-damd-vm510li-amlfind-53474f46-08replace-58474f46-08-regcomment-change-method-reg-0-serialized-to-xreg-optionally-pair-with-ssdt-damd-vm510li-amlfind-5f-52-45-47-02replace-58-52-45-47-02复制代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#sgofcomment-change-method-sgof-0-serialized-to-xgof-optionally-pair-with-ssdt-damd-vm510li-amlfind-53474f46-08replace-58474f46-08-regcomment-change-method-reg-0-serialized-to-xreg-optionally-pair-with-ssdt-damd-vm510li-amlfind-5f-52-45-47-02replace-58-52-45-47-02复制代码"}},[e._v("#")]),e._v(" SGOFComment:change Method(SGOF,0,Serialized) to XGOF, optionally pair with SSDT-DAMD-VM510LI.amlFind:53474F46 08Replace:58474F46 08# _REGComment:change Method(_REG,0,Serialized) to XREG, optionally pair with SSDT-DAMD-VM510LI.amlFind:5F 52 45 47 02Replace:58 52 45 47 02复制代码")]),e._v(" "),o("p",[e._v("变频\\声卡 CC 配置\\USB 遮蔽器")]),e._v(" "),o("p",[e._v("这些在论坛都有介绍,我就不再论述,只需放入 SSDT 即可.")]),e._v(" "),o("p",[e._v("测试")]),e._v(" "),o("p",[e._v("全部修改后,到最重要一步,测试修改的 hotpatch 是否可用.")]),e._v(" "),o("p",[e._v("还挺幸运的,一直写下来的笔记,就 FN 因为完全无脑抄袭没有注意自己的 Q0E 和 Q0F 是在 _SB.PCI0.LPCB.EC0 设备里面,我没把他们放到这个 Scope (域) 里面,故此不生效.")]),e._v(" "),o("p",[e._v("注入声卡 ID")]),e._v(" "),o("p",[e._v("这个非常简单,只需要放入SSDT-HDAU.aml 和 SSDT-HDEF.aml 到 Clover > ACPI > patched")]),e._v(" "),o("p",[e._v("但是需要注意自己的 DSDT 有没有定义 HDEF 设备,如果没有,打开 SSDT-HDEF.dsl 将以下注释去掉.\n// Note: If your ACPI set (DSDT+SSDTs) does not define HDEF (or AZAL)  // add this Device definition (by uncommenting it)  //  //Device(_SB.PCI0.HDEF)  //{  //  Name(_ADR, 0x001b0000)  //  Name(_PRW, Package() { 0x0d, 0x05 }) // may need tweaking (or not needed)  //}复制代码")]),e._v(" "),o("p",[e._v("无需修改 ID,我们只需在 SSDT-Config.aml 的 Name(AUDL, Ones)定义我们注入的 ID 即可，例如我的声卡 ID 是4，那么我就修改 Name(AUDL, 4)。（关于SSDT-Config.aml 更多的参数细节，下一章节会说到。")]),e._v(" "),o("p",[e._v("SSDT-Config 说明")]),e._v(" "),o("p",[e._v("这个漏了说，而且这个是 Hotpatch 必用的 SSDT，因为里面包含了一些配置。")]),e._v(" "),o("p",[e._v('首先我们来看看 SSDT-Config 有些啥？\n// configuration data for other SSDTs in this packDefinitionBlock("", "SSDT", 2, "hack", "RMCF", 0){  Device(RMCF)  {  Name(_ADR, 0) // do not remove  Method(HELP)  {    Store("TYPE indicates type of the computer. 0: desktop, 1: laptop", Debug)    Store("HIGH selects display type. 1: high resolution, 2: low resolution", Debug)    Store("DPTS for laptops only. 1: enables/disables DGPU in _WAK/_PTS", Debug)    Store("SHUT enables shutdown fix. 1: disables _PTS code when Arg0==5", Debug)    Store("AUDL indicates audio layout-id for patched AppleHDA. Ones: no injection", Debug)    Store("BKLT indicates the type of backlight control. 0: IntelBacklight, 1: AppleBacklight", Debug)    Store("LMAX indicates max for IGPU PWM backlight. Ones: Use default, other values must match framebuffer", Debug)  }  // TYPE: Indicates the type of computer... desktop or laptop  //  //0: desktop  //0: 台式机  //1: laptop  //1: 笔记本  Name(TYPE, 1)  // HIGH: High resolution/low resolution selection.Affects IGPU injection.  // HIGH: 高分辨率/低分辨率选择。 影响IGPU注入。  // For 1600x900+ on Sandy/Ivy, use 1  // 对于1600x900 +在Sandy / Ivy，请使用1  // For UHD/QHD+ on Haswell/Broadwell, use 1  // 对于Haswell / Broadwell的UHD / QHD +，请使用1  // Others (low resolution), use 0  // 其他（低分辨率），使用0  Name(HIGH, 0)  // DPTS: For laptops only: set to 1 if you want to enable and  // DPTS：仅适用于笔记本电脑：如果要启用和，请设置为1  //disable the DGPU _PTS and _WAK.  //禁用DGPU _PTS和_WAK。  //0: does not manipulate the DGPU in _WAK and _PTS  //0：不操作_WAK和_PTS中的DGPU  //1: disables the DGPU in _WAK and enables it in _PTS  //1：禁用_WAK中的DGPU，并在_PTS中启用它  Name(DPTS, 0)  // SHUT: Shutdown fix, disable _PTS code when Arg0==5 (shutdown)  // SHUT：关闭修复，当Arg0 == 5（关闭）时禁用_PTS代码，  //0: does not affect _PTS behavior during shutdown  //0：在关闭期间不影响_PTS行为  //1: disables _PTS code during shutdown  //1：在关闭期间禁用_PTS代码  Name(SHUT, 0)  // AUDL: Audio Layout  // AUDL：音频布局  // The value here will be used to inject layout-id for HDEF and HDAU  // 这里的值将用于注入HDEF和HDAU的layout-id  // If set to Ones, no audio injection will be done.  // 如果设置为Ones，则不会进行音频插入。  Name(AUDL, Ones)  // BKLT: Backlight control type  // BKLT：背光控制类型  // 0: Using IntelBacklight.kext  // 0：使用IntelBacklight.kext  // 1: Using AppleBacklight.kext + AppleBacklightInjector.kext  // 1：使用AppleBacklight.kext + AppleBacklightInjector.kext  Name(BKLT, 0)  // LMAX: Backlight PWM MAX.Must match framebuffer in use.  // LMAX：背光PWM最大值。 必须匹配使用中的帧缓冲区。  // Ones: Default will be used (0x710 for Ivy/Sandy, 0xad9 for Haswell/Broadwell)  // Ones：将使用默认（Ivy / Sandy 的默认值是 0x710，Haswell / Broadwell 的默认值是 0xad9）  // Other values: must match framebuffer  // 其他值：必须与framebuffer相匹配  Name(LMAX, Ones)  }}//EOF复制代码')]),e._v(" "),o("p",[e._v("上面 RM 都注释了，我以 Google 翻译过来，方便理解。")]),e._v(" "),o("p",[e._v("第一个值，TYPE 从 SSDT-IGPU 调用，影响显卡 ID 的注入。查看了下代码，好像是区分是否注入高分屏 ID 有关。第二个值，HIGH 从 SSDT-IGPU 调用，影响点卡 ID 的注入。当 TYPE 设置成笔记本才生效。第三个值，DPTS 从 SSDT-PTSWAK 调用，这个 SSDT 是重写了睡眠和唤醒的方法，加入了一些我们补丁需要用到的代码，这里设置 1 则会在睡眠的时候开启显卡，唤醒后关闭显卡。第四个值，SHUT 从 SSDT-PTSWAK 调用，这个 SSDT 功能同上，这里设置 1 则会在关机的时候禁用 _PTS，和 Shutdown fix 同理。第五个值，AUDL 从 SSDT-HDAU 和 SSDT-HDEF 调用，这两个 SSDT 前者负责注入声卡 ID，后者则负责注入 HDMI 声卡 ID，而这个值就是控制两个 SSDT 注入声卡的行为，如果写 Ones 则什么都不注入，如果写 3，则声卡的 layout-id 则为 3。第六个值，BKLT 从 SSDT-PNLF 调用，这个 SSDT 看名字大家应该都很熟悉，就是加入 PNLF 设备，用来启用我们的笔记本亮度调节驱动的，而这个值是控制亮度调节的驱动是用哪一种，0 是使用 IntelBacklight.kext，1 是使用 AppleBacklight.kext + AppleBacklightInjector.kext。第七个值，LMAX 从 SSDT-PNLF 调用，这个 SSDT 同上，这个值是设置背光的 PWM 最大值，Ones 是使用默认值，Ivy / Sandy 的默认值是 0x710，Haswell / Broadwell 的默认值是 0xad9，你也可以设置其他值，但是这个值必须与 framebuffer 相匹配。")]),e._v(" "),o("p",[e._v("参考文章")]),e._v(" "),o("p",[e._v("External()用法")]),e._v(" "),o("p",[e._v("OS-X-Clover-Laptop-Config")]),e._v(" "),o("p",[e._v("HP-ProBook-4x30s-DSDT-Patch")]),e._v(" "),o("p",[e._v('Guide Using Clover to "hotpatch" ACPI')]),e._v(" "),o("p",[e._v('帖子写的真辛苦"版主们审核也累了"在论坛编辑有可能有很多地方乱掉，例如代码的一些格式等。')]),e._v(" "),o("p",[e._v("我这个笔记本来写在博客上，如果发现论坛上有什么不对劲的，可以上我博客看，博客里面应该都是没问题的，并且日后有什么发现，我第一时间也会写在博客上记录下来。")]),e._v(" "),o("p",[e._v("https://blog.neroxps.cn/blog/macOS/Hotpatch.html")])])}),[],!1,null,null,null);t.default=a.exports}}]);