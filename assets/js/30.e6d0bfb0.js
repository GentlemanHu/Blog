(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{565:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"kotlin基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin基础"}},[t._v("#")]),t._v(" Kotlin基础")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://kotlinlang.org/docs/basic-syntax.html#variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kotlin_Basics"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"类与方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类与方法"}},[t._v("#")]),t._v(" 类与方法")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://kotlinlang.org/docs/functions.html#default-arguments",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kotlin_Functions"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://kotlinlang.org/docs/lambdas.html#lambda-expression-syntax",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lambda"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("都是冒号"),s("code",[t._v(":")]),t._v("，继承，变量类型定义，都是冒号，跟在冒号后边")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义方法 "),s("code",[t._v("fun")]),t._v(" functionName(): "),s("code",[t._v("T")]),t._v("{}")]),t._v(" "),s("blockquote",[s("p",[t._v("用 "),s("code",[t._v(":")]),t._v("后边跟返回类型，不写默认 Unit ，可以定义泛型")])])]),t._v(" "),s("li",[s("p",[t._v("方法后边可直接跟表达式，返回类型编译器可以自动推断")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n2\n")])])])]),t._v(" "),s("li",[s("p",[t._v("方法的形参可以有默认值")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"真NB"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s2\n")])])])]),t._v(" "),s("li",[s("p",[t._v("方法参数可以使Lambda")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       no"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Boolean"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       yes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Unit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oh yeah"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("yes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   \t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                       \n")])])])]),t._v(" "),s("li",[s("p",[t._v("参数最后一个lambda可以再调用时候直接写成代码块")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// yes lambda block yes代码块")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("此方法最好写成"),s("code",[t._v("inline")]),t._v("函数，某种程度上提升性能")])])])]),t._v(" "),s("h3",{attrs:{id:"判断与循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断与循环"}},[t._v("#")]),t._v(" 判断与循环")]),t._v(" "),s("h3",{attrs:{id:"集合-in-when"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合-in-when"}},[t._v("#")]),t._v(" 集合，"),s("code",[t._v("in")]),t._v(","),s("code",[t._v("when")])]),t._v(" "),s("h3",{attrs:{id:"string模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string模板"}},[t._v("#")]),t._v(" String模板")]),t._v(" "),s("h3",{attrs:{id:"空处理-nullable-values-和-null-checks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空处理-nullable-values-和-null-checks"}},[t._v("#")]),t._v(" 空处理，"),s("code",[t._v("Nullable values")]),t._v(" 和 null checks")]),t._v(" "),s("h3",{attrs:{id:"类型检查和转换-cast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型检查和转换-cast"}},[t._v("#")]),t._v(" 类型检查和转换，Cast")]),t._v(" "),s("h2",{attrs:{id:"技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧"}},[t._v("#")]),t._v(" 技巧")]),t._v(" "),s("h3",{attrs:{id:"extension拓展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extension拓展"}},[t._v("#")]),t._v(" Extension拓展")]),t._v(" "),s("h3",{attrs:{id:"inline函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inline函数"}},[t._v("#")]),t._v(" "),s("code",[t._v("inline")]),t._v("函数")]),t._v(" "),s("h3",{attrs:{id:"infix函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#infix函数"}},[t._v("#")]),t._v(" "),s("code",[t._v("infix")]),t._v("函数")]),t._v(" "),s("h3",{attrs:{id:"data类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data类"}},[t._v("#")]),t._v(" "),s("code",[t._v("data")]),t._v("类")]),t._v(" "),s("h2",{attrs:{id:"相关资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关资料"}},[t._v("#")]),t._v(" 相关资料")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/usagoole/article/details/102680165",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kotlin(八)之泛型_协变——逆变——不变"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);