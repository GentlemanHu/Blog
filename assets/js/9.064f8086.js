(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{544:function(t,n,e){"use strict";e.r(n);var r=e(6),s=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"今日内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#今日内容"}},[t._v("#")]),t._v(" 今日内容")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. JDBC基本概念\n2. 快速入门\n3. 对JDBC中各个接口和类详解\n")])])]),e("h2",{attrs:{id:"jdbc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdbc"}},[t._v("#")]),t._v(" JDBC：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('1. 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库\n\t* JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。\n\n2. 快速入门：\n\t* 步骤：\n\t\t1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar\n\t\t\t1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下\n\t\t\t2.右键--\x3eAdd As Library\n\t\t2. 注册驱动\n\t\t3. 获取数据库连接对象 Connection\n\t\t4. 定义sql\n\t\t5. 获取执行sql语句的对象 Statement\n\t\t6. 执行sql，接受返回结果\n\t\t7. 处理结果\n\t\t8. 释放资源\n\n\t* 代码实现：\n\t  \t//1. 导入驱动jar包\n        //2.注册驱动\n        Class.forName("com.mysql.jdbc.Driver");\n        //3.获取数据库连接对象\n        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db3", "root", "root");\n        //4.定义sql语句\n        String sql = "update account set balance = 500 where id = 1";\n        //5.获取执行sql的对象 Statement\n        Statement stmt = conn.createStatement();\n        //6.执行sql\n        int count = stmt.executeUpdate(sql);\n        //7.处理结果\n        System.out.println(count);\n        //8.释放资源\n        stmt.close();\n        conn.close();\n\n3. 详解各个对象：\n\t1. DriverManager：驱动管理对象\n\t\t* 功能：\n\t\t\t1. 注册驱动：告诉程序该使用哪一个数据库驱动jar\n\t\t\t\tstatic void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 \n\t\t\t\t写代码使用：  Class.forName("com.mysql.jdbc.Driver");\n\t\t\t\t通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块\n\t\t\t\t static {\n\t\t\t\t        try {\n\t\t\t\t            java.sql.DriverManager.registerDriver(new Driver());\n\t\t\t\t        } catch (SQLException E) {\n\t\t\t\t            throw new RuntimeException("Can\'t register driver!");\n\t\t\t\t        }\n\t\t\t\t\t}\n\n\t\t\t\t注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。\n\t\t\t2. 获取数据库连接：\n\t\t\t\t* 方法：static Connection getConnection(String url, String user, String password) \n\t\t\t\t* 参数：\n\t\t\t\t\t* url：指定连接的路径\n\t\t\t\t\t\t* 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称\n\t\t\t\t\t\t* 例子：jdbc:mysql://localhost:3306/db3\n\t\t\t\t\t\t* 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称\n\t\t\t\t\t* user：用户名\n\t\t\t\t\t* password：密码 \n\t2. Connection：数据库连接对象\n\t\t1. 功能：\n\t\t\t1. 获取执行sql 的对象\n\t\t\t\t* Statement createStatement()\n\t\t\t\t* PreparedStatement prepareStatement(String sql)  \n\t\t\t2. 管理事务：\n\t\t\t\t* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务\n\t\t\t\t* 提交事务：commit() \n\t\t\t\t* 回滚事务：rollback() \n\t3. Statement：执行sql的对象\n\t\t1. 执行sql\n\t\t\t1. boolean execute(String sql) ：可以执行任意的sql 了解 \n\t\t\t2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句\n\t\t\t\t* 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值>0的则执行成功，反之，则失败。\n\t\t\t3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句\n\t\t2. 练习：\n\t\t\t1. account表 添加一条记录\n\t\t\t2. account表 修改记录\n\t\t\t3. account表 删除一条记录\n\n\t\t\t代码：\n\t\t\t\tStatement stmt = null;\n\t\t        Connection conn = null;\n\t\t        try {\n\t\t            //1. 注册驱动\n\t\t            Class.forName("com.mysql.jdbc.Driver");\n\t\t            //2. 定义sql\n\t\t            String sql = "insert into account values(null,\'王五\',3000)";\n\t\t            //3.获取Connection对象\n\t\t            conn = DriverManager.getConnection("jdbc:mysql:///db3", "root", "root");\n\t\t            //4.获取执行sql的对象 Statement\n\t\t            stmt = conn.createStatement();\n\t\t            //5.执行sql\n\t\t            int count = stmt.executeUpdate(sql);//影响的行数\n\t\t            //6.处理结果\n\t\t            System.out.println(count);\n\t\t            if(count > 0){\n\t\t                System.out.println("添加成功！");\n\t\t            }else{\n\t\t                System.out.println("添加失败！");\n\t\t            }\n\t\t\n\t\t        } catch (ClassNotFoundException e) {\n\t\t            e.printStackTrace();\n\t\t        } catch (SQLException e) {\n\t\t            e.printStackTrace();\n\t\t        }finally {\n\t\t            //stmt.close();\n\t\t            //7. 释放资源\n\t\t            //避免空指针异常\n\t\t            if(stmt != null){\n\t\t                try {\n\t\t                    stmt.close();\n\t\t                } catch (SQLException e) {\n\t\t                    e.printStackTrace();\n\t\t                }\n\t\t            }\n\t\t\n\t\t            if(conn != null){\n\t\t                try {\n\t\t                    conn.close();\n\t\t                } catch (SQLException e) {\n\t\t                    e.printStackTrace();\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t\t\n\t4. ResultSet：结果集对象,封装查询结果\n\t\t* boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true\n\t\t* getXxx(参数):获取数据\n\t\t\t* Xxx：代表数据类型   如： int getInt() ,\tString getString()\n\t\t\t* 参数：\n\t\t\t\t1. int：代表列的编号,从1开始   如： getString(1)\n\t\t\t\t2. String：代表列名称。 如： getDouble("balance")\n\t\t\n\t\t* 注意：\n\t\t\t* 使用步骤：\n\t\t\t\t1. 游标向下移动一行\n\t\t\t\t2. 判断是否有数据\n\t\t\t\t3. 获取数据\n\n\t\t\t   //循环判断游标是否是最后一行末尾。\n\t            while(rs.next()){\n\t                //获取数据\n\t                //6.2 获取数据\n\t                int id = rs.getInt(1);\n\t                String name = rs.getString("name");\n\t                double balance = rs.getDouble(3);\n\t\n\t                System.out.println(id + "---" + name + "---" + balance);\n\t            }\n\n\t\t* 练习：\n\t\t\t* 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。\n\t\t\t\t1. 定义Emp类\n\t\t\t\t2. 定义方法 public List<Emp> findAll(){}\n\t\t\t\t3. 实现方法 select * from emp;\n\t\t\t\t\t\n\t5. PreparedStatement：执行sql的对象\n\t\t1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题\n\t\t\t1. 输入用户随便，输入密码：a\' or \'a\' = \'a\n\t\t\t2. sql：select * from user where username = \'fhdsjkf\' and password = \'a\' or \'a\' = \'a\' \n\n\t\t2. 解决sql注入问题：使用PreparedStatement对象来解决\n\t\t3. 预编译的SQL：参数使用?作为占位符\n\t\t4. 步骤：\n\t\t\t1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar\n\t\t\t2. 注册驱动\n\t\t\t3. 获取数据库连接对象 Connection\n\t\t\t4. 定义sql\n\t\t\t\t* 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;\n\t\t\t5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) \n\t\t\t6. 给？赋值：\n\t\t\t\t* 方法： setXxx(参数1,参数2)\n\t\t\t\t\t* 参数1：？的位置编号 从1 开始\n\t\t\t\t\t* 参数2：？的值\n\t\t\t7. 执行sql，接受返回结果，不需要传递sql语句\n\t\t\t8. 处理结果\n\t\t\t9. 释放资源\n\n\t\t5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作\n\t\t\t1. 可以防止SQL注入\n\t\t\t2. 效率更高\n')])])]),e("h2",{attrs:{id:"抽取jdbc工具类-jdbcutils"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽取jdbc工具类-jdbcutils"}},[t._v("#")]),t._v(" 抽取JDBC工具类 ： JDBCUtils")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('* 目的：简化书写\n* 分析：\n\t1. 注册驱动也抽取\n\t2. 抽取一个方法获取连接对象\n\t\t* 需求：不想传递参数（麻烦），还得保证工具类的通用性。\n\t\t* 解决：配置文件\n\t\t\tjdbc.properties\n\t\t\t\turl=\n\t\t\t\tuser=\n\t\t\t\tpassword=\n\n\n\t3. 抽取一个方法释放资源\n\n* 代码实现：\n\tpublic class JDBCUtils {\n    private static String url;\n    private static String user;\n    private static String password;\n    private static String driver;\n    /**\n     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块\n     */\n    static{\n        //读取资源文件，获取值。\n\n        try {\n            //1. 创建Properties集合类。\n            Properties pro = new Properties();\n\n            //获取src路径下的文件的方式---\x3eClassLoader 类加载器\n            ClassLoader classLoader = JDBCUtils.class.getClassLoader();\n            URL res  = classLoader.getResource("jdbc.properties");\n            String path = res.getPath();\n            System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties\n            //2. 加载文件\n           // pro.load(new FileReader("D:\\\\IdeaProjects\\\\itcast\\\\day04_jdbc\\\\src\\\\jdbc.properties"));\n            pro.load(new FileReader(path));\n\n            //3. 获取数据，赋值\n            url = pro.getProperty("url");\n            user = pro.getProperty("user");\n            password = pro.getProperty("password");\n            driver = pro.getProperty("driver");\n            //4. 注册驱动\n            Class.forName(driver);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    /**\n     * 获取连接\n     * @return 连接对象\n     */\n    public static Connection getConnection() throws SQLException {\n\n        return DriverManager.getConnection(url, user, password);\n    }\n\n    /**\n     * 释放资源\n     * @param stmt\n     * @param conn\n     */\n    public static void close(Statement stmt,Connection conn){\n        if( stmt != null){\n            try {\n                stmt.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if( conn != null){\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n\n    /**\n     * 释放资源\n     * @param stmt\n     * @param conn\n     */\n    public static void close(ResultSet rs,Statement stmt, Connection conn){\n        if( rs != null){\n            try {\n                rs.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if( stmt != null){\n            try {\n                stmt.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if( conn != null){\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n\n* 练习：\n\t* 需求：\n\t\t1. 通过键盘录入用户名和密码\n\t\t2. 判断用户是否登录成功\n\t\t\t* select * from user where username = "" and password = "";\n\t\t\t* 如果这个sql有查询结果，则成功，反之，则失败\n\n\t* 步骤：\n\t\t1. 创建数据库表 user\n\t\t\tCREATE TABLE USER(\n\t\t\t\tid INT PRIMARY KEY AUTO_INCREMENT,\n\t\t\t\tusername VARCHAR(32),\n\t\t\t\tPASSWORD VARCHAR(32)\n\t\t\t\n\t\t\t);\n\n\t\t\tINSERT INTO USER VALUES(NULL,\'zhangsan\',\'123\');\n\t\t\tINSERT INTO USER VALUES(NULL,\'lisi\',\'234\');\n\n\t\t2. 代码实现：\n\t\t\tpublic class JDBCDemo9 {\n\n\t\t\t    public static void main(String[] args) {\n\t\t\t        //1.键盘录入，接受用户名和密码\n\t\t\t        Scanner sc = new Scanner(System.in);\n\t\t\t        System.out.println("请输入用户名：");\n\t\t\t        String username = sc.nextLine();\n\t\t\t        System.out.println("请输入密码：");\n\t\t\t        String password = sc.nextLine();\n\t\t\t        //2.调用方法\n\t\t\t        boolean flag = new JDBCDemo9().login(username, password);\n\t\t\t        //3.判断结果，输出不同语句\n\t\t\t        if(flag){\n\t\t\t            //登录成功\n\t\t\t            System.out.println("登录成功！");\n\t\t\t        }else{\n\t\t\t            System.out.println("用户名或密码错误！");\n\t\t\t        }\n\t\t\t\n\t\t\t\n\t\t\t    }\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t    /**\n\t\t\t     * 登录方法\n\t\t\t     */\n\t\t\t    public boolean login(String username ,String password){\n\t\t\t        if(username == null || password == null){\n\t\t\t            return false;\n\t\t\t        }\n\t\t\t        //连接数据库判断是否登录成功\n\t\t\t        Connection conn = null;\n\t\t\t        Statement stmt =  null;\n\t\t\t        ResultSet rs = null;\n\t\t\t        //1.获取连接\n\t\t\t        try {\n\t\t\t            conn =  JDBCUtils.getConnection();\n\t\t\t            //2.定义sql\n\t\t\t            String sql = "select * from user where username = \'"+username+"\' and password = \'"+password+"\' ";\n\t\t\t            //3.获取执行sql的对象\n\t\t\t            stmt = conn.createStatement();\n\t\t\t            //4.执行查询\n\t\t\t            rs = stmt.executeQuery(sql);\n\t\t\t            //5.判断\n\t\t\t           /* if(rs.next()){//如果有下一行，则返回true\n\t\t\t                return true;\n\t\t\t            }else{\n\t\t\t                return false;\n\t\t\t            }*/\n\t\t\t           return rs.next();//如果有下一行，则返回true\n\t\t\t\n\t\t\t        } catch (SQLException e) {\n\t\t\t            e.printStackTrace();\n\t\t\t        }finally {\n\t\t\t            JDBCUtils.close(rs,stmt,conn);\n\t\t\t        }\n\t\t\t\n\t\t\t\n\t\t\t        return false;\n\t\t\t    }\n\t\t\t}\n')])])]),e("h2",{attrs:{id:"jdbc控制事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jdbc控制事务"}},[t._v("#")]),t._v(" JDBC控制事务：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。\n2. 操作：\n\t1. 开启事务\n\t2. 提交事务\n\t3. 回滚事务\n3. 使用Connection对象来管理事务\n\t* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务\n\t\t* 在执行sql之前开启事务\n\t* 提交事务：commit() \n\t\t* 当所有sql都执行完提交事务\n\t* 回滚事务：rollback() \n\t\t* 在catch中回滚事务\n\n4. 代码：\n\tpublic class JDBCDemo10 {\n\n\t    public static void main(String[] args) {\n\t        Connection conn = null;\n\t        PreparedStatement pstmt1 = null;\n\t        PreparedStatement pstmt2 = null;\n\t\n\t        try {\n\t            //1.获取连接\n\t            conn = JDBCUtils.getConnection();\n\t            //开启事务\n\t            conn.setAutoCommit(false);\n\t\n\t            //2.定义sql\n\t            //2.1 张三 - 500\n\t            String sql1 = "update account set balance = balance - ? where id = ?";\n\t            //2.2 李四 + 500\n\t            String sql2 = "update account set balance = balance + ? where id = ?";\n\t            //3.获取执行sql对象\n\t            pstmt1 = conn.prepareStatement(sql1);\n\t            pstmt2 = conn.prepareStatement(sql2);\n\t            //4. 设置参数\n\t            pstmt1.setDouble(1,500);\n\t            pstmt1.setInt(2,1);\n\t\n\t            pstmt2.setDouble(1,500);\n\t            pstmt2.setInt(2,2);\n\t            //5.执行sql\n\t            pstmt1.executeUpdate();\n\t            // 手动制造异常\n\t            int i = 3/0;\n\t\n\t            pstmt2.executeUpdate();\n\t            //提交事务\n\t            conn.commit();\n\t        } catch (Exception e) {\n\t            //事务回滚\n\t            try {\n\t                if(conn != null) {\n\t                    conn.rollback();\n\t                }\n\t            } catch (SQLException e1) {\n\t                e1.printStackTrace();\n\t            }\n\t            e.printStackTrace();\n\t        }finally {\n\t            JDBCUtils.close(pstmt1,conn);\n\t            JDBCUtils.close(pstmt2,null);\n\t        }\n\t\n\t\n\t    }\n\t\n\t}\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);